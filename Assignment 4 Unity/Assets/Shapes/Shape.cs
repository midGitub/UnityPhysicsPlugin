using UnityEngine;
using UnityEngine.Events;


namespace Humber.GAME205
{
    public abstract class Shape : MonoBehaviour
    {
        // Events
        [Header("Events")]
        [Tooltip("Whenever the data of this shape is changed, this event will be invoked.")]
        public UnityEvent ValuesChanged;

        /// <summary>
        /// The handle is generated by the Physics Native API and can only be set once by the library.
        /// </summary>
        private int handle = 0;
        public int Handle
        {
            get { return handle; }
            set
            {
                //preventing it to be changed only once
                if (handle == 0)
                {
                    if (value < 0)
                    {
                        handle = 0;
                    }
                    else
                    {
                        handle = value;
                    }
                }
            }
        }

        /// <summary>
        /// The layer is used to check for collision
        /// </summary>
        [SerializeField] 
        private int layer = 0;
        public int Layer
        {
            get { return layer; }
            set
            {
                if (value != layer)
                {
                    if (layer < 0)
                    {
                        layer = 0;
                    }
                    else
                    {
                        layer = value;
                        ValuesChanged.Invoke();
                    }
                }
            }
        }

        [SerializeField]
        private int[] collisionLayers;
        private static readonly int[] DEFAULT_COLLISIONS =
            new int[1] { 0 };
        public int[] CollisionLayers
        {
            get { return collisionLayers ?? (collisionLayers = DEFAULT_COLLISIONS); }
            set
            {
                if (value != collisionLayers)
                {
                    collisionLayers = value;
                }
            }
        }

        [SerializeField]
        private bool isStatic = false;
        public bool IsStatic
        {
            get { return isStatic; }
            set
            {
                if (value != isStatic)
                {
                    isStatic = value;
                }
            }
        }

        protected abstract void OnValidate();
    }
}